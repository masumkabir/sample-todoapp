import org.gradle.internal.os.OperatingSystem

buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        gradlePluginPortal()
        maven { url "http://repo.spring.io/plugins-release" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath 'io.spring.gradle:dependency-management-plugin:1.0.8.RELEASE'
        classpath "io.spring.gradle:propdeps-plugin:0.0.10.RELEASE"
    }
}

plugins {
    id "java"
    id "maven"
    id "idea"
    id "jacoco"
    id "com.google.cloud.tools.jib" version "1.3.0"
    id "com.gorylenko.gradle-git-properties" version "2.0.0"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "net.ltgt.apt" version "0.21"
    id "org.liquibase.gradle" version "2.0.1"
    id "org.sonarqube" version "2.7.1"
}
allprojects  {
    apply plugin: "io.spring.dependency-management"
}
sourceCompatibility = 1.8
targetCompatibility = 1.8
assert System.properties["java.specification.version"] == "1.8" || "11" || "12"

apply plugin: "org.springframework.boot"
apply plugin: "propdeps"

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}

if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}
idea {
    module {
        excludeDirs += files("node_modules")
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

if (OperatingSystem.current().isWindows()) {
    task classpathJar(type: Jar) {
        inputs.files sourceSets.main.runtimeClasspath

        archiveName = "runboot-classpath.jar"
        doFirst {
            manifest {
                def classpath = sourceSets.test.runtimeClasspath.files
                attributes "Class-Path": classpath.collect { f -> f.toURI().toString() }.join(" ")
            }
        }
    }

    bootRun {
        classpath = classpathJar.outputs.files
    }
}

defaultTasks "bootRun"

group = "com.operr"
version = "0.0.1-SNAPSHOT"

description = ""

springBoot {
    mainClassName = "com.operr.TodoappApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }

    reports.html.enabled = true
}

task integrationTest(type: Test) {
    doFirst {
        systemProperty 'spring.profiles.active', 'dev'
    }
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }

    reports.html.enabled = true
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

project.ext.diffChangelogFile = "src/main/resources/config/liquibase/changelog/" + new Date().format("yyyyMMddHHmmss") + "_changelog.xml"

liquibase {
    activities {
        main {
            driver ""
            url ""
            username "todoapp"
            password ""
            changeLogFile "src/main/resources/config/liquibase/master.xml"
            defaultSchemaName ""
            logLevel "debug"
            classpath "src/main/resources/"
        }
        diffLog {
            driver ""
            url ""
            username "todoapp"
            password ""
            changeLogFile project.ext.diffChangelogFile
            referenceUrl "hibernate:spring:com.operr.domain?dialect=&hibernate.physical_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy"
            defaultSchemaName ""
            logLevel "debug"
            classpath "$buildDir/classes/java/main"
        }
    }

    runList = project.ext.runList
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "http://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-cache:${springBootVersion}"
    implementation "io.dropwizard.metrics:metrics-core:4.1.0"
    implementation "io.micrometer:micrometer-registry-prometheus:1.2.0"
    implementation "net.logstash.logback:logstash-logback-encoder:6.1"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc:2.9.9"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5:2.9.9"
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.module:jackson-module-afterburner:2.9.9"
    implementation "javax.cache:cache-api"
    implementation "org.hibernate:hibernate-core:5.4.3.Final"
    implementation "com.zaxxer:HikariCP:3.3.1"
    implementation "org.apache.commons:commons-lang3:3.9"
    implementation "commons-io:commons-io"
    implementation "javax.transaction:javax.transaction-api"
    implementation "org.ehcache:ehcache:3.8.0"
    implementation "org.hibernate:hibernate-jcache:5.4.4.Final"
    implementation "org.hibernate:hibernate-entitymanager:5.4.4.Final"
    implementation "org.hibernate:hibernate-envers:5.4.4.Final"
    implementation "org.hibernate.validator:hibernate-validator:6.0.17.Final"
    implementation "org.liquibase:liquibase-core:3.7.0"
    liquibaseRuntime "org.liquibase:liquibase-core:3.7.0"
    liquibaseRuntime "org.liquibase.ext:liquibase-hibernate5:${liquibase_hibernate5_version}"
    liquibaseRuntime sourceSets.main.compileClasspath
    implementation "org.springframework.boot:spring-boot-loader-tools:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-mail:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-logging:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-aop:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-undertow:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
    implementation "org.zalando:problem-spring-web:0.24.0"
    implementation "org.springframework.cloud:spring-cloud-starter:${springBootVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-ribbon:${springBootVersion}"
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-hystrix:${springBootVersion}"
    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.cloud:spring-cloud-starter-openfeign:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-cloud-connectors:${springBootVersion}"
    implementation "org.springframework.security:spring-security-config:5.1.5.RELEASE"
    implementation "org.springframework.security:spring-security-data:5.1.5.RELEASE"
    implementation "org.springframework.security:spring-security-web:5.1.5.RELEASE"
    implementation "io.jsonwebtoken:jjwt-api:0.10.7"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:0.10.7"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:0.10.7"
    implementation("io.springfox:springfox-swagger2:2.9.2") {
        exclude module: "mapstruct"
    }
    implementation "io.springfox:springfox-bean-validators:2.9.2"
    implementation "mysql:mysql-connector-java:8.0.17"
    liquibaseRuntime "mysql:mysql-connector-java:8.0.17"
    implementation "org.mapstruct:mapstruct:${mapstruct_version}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstruct_version}"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernate_version}"
    annotationProcessor "org.glassfish.jaxb:jaxb-runtime:${jaxb_runtime_version}"
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor:${spring_boot_version}") {
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "com.jayway.jsonpath:json-path:2.4.0"
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude module: "junit"
        exclude group: "com.vaadin.external.google", module: "android-json"
    }
    testImplementation "org.springframework.security:spring-security-test:5.1.5.RELEASE"
    testImplementation "org.springframework.boot:spring-boot-test:${springBootVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.5.1"
    testImplementation "org.assertj:assertj-core:3.13.0"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:3.0.0"
    testImplementation "org.hamcrest:hamcrest-all:1.3"
    implementation "com.h2database:h2:1.4.199"
    liquibaseRuntime "com.h2database:h2:1.4.199"
    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.5.1")
    testRuntimeOnly("org.junit.platform:junit-platform-commons:1.5.1")
    testRuntimeOnly("org.junit.platform:junit-platform-engine:1.5.1")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-api:5.5.1")
    testRuntimeOnly("net.bytebuddy:byte-buddy:1.9.16")

}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "5.4.1"
}
compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
